import os
import subprocess
import glob
from shutil import move
from shutil import copyfile
from astropy.io import fits


def perform_astrometry(target, dirtarget, filters, verbose=False):
    """Adds accurate WCS information to all headers in dataset.

    Finds coordinates of stars using imstar command and WCS information
    generated by astrometry.net and writes information to a table called
    new-image.tab. It then adds the WCS information from new-image.fits to the
    headers of all the images in the dataset to get a preliminary estimate of
    the true WCS information. It writes these files and then uses imstar to
    correct the WCS information in each header. These files are copeied to a
    new directory withtin WCS called accurate_WCS.

    Parameters
    ----------
    target : str
        Name of target.
    dirtarget : str
        Directory containing all bias, flat, and raw science images.
    filters : list
        List containing string of each filter keyword found in header of flat
        field and light frame images.
    verbose : boolean, optional
        Print information about status of program.

    Returns
    -------
    None
    """
    dirtarget = os.path.join(dirtarget, 'ISR_Images')
    os.chdir(dirtarget)

    # Creates new-images.tab file with positions of stars.
    args = '-vhi' if verbose else '-hi'
    subprocess.call(['imstar', args, '700', '-tw', 'new-image.fits'])

    # Gets header with WCS information to append to all images.
    wcsim_hdu = fits.open(os.path.join(dirtarget, 'new-image.fits'))
    wcsim_header = wcsim_hdu[0].header

    # Generate list of strings of three-digit numbers from 0 to 999
    # used to name files that are written.
    numbers1 = list(range(0, 999, 1))
    numbers2 = []
    for i in numbers1:
        numbers2.append(str(i))
    numbers = []
    for i in numbers2:
        if len(i) == 1:
            numbers.append('00{}'.format(i))
        if len(i) == 2:
            numbers.append('0{}'.format(i))
        if len(i) == 3:
            numbers.append(i)

    for fil in filters:
        os.chdir(dirtarget)
        os.mkdir(os.path.join(dirtarget, fil, 'WCS'))
        # Reads in ISR images of filter being processed sorted by path name.
        images = sorted(glob.glob(os.path.join(dirtarget, fil, '*.fits')))
        # Copies new-image.tab to WCS folder for images of filter being
        # processed.
        copyfile('new-image.tab', os.path.join(fil, 'WCS', 'new-image.tab'))

        for n, image in enumerate(images):
            # Reads in hdu and image data of non-plate-solved image and assigns
            # variable to image header.
            other_hdu = fits.open(image)
            imagedata = other_hdu[0].data
            other_header = other_hdu[0].header

            # Finds all uncommon header keywords between new-image.fits file
            # and file being processed.
            diff = fits.HeaderDiff(wcsim_header, other_header).diff_keywords[0]

            for keyword in diff:
                # Skips unneeded header keywords and adds uncommon keywords
                # and their value to images.
                if keyword not in ('COMMENT', 'HISTORY'):
                    other_header.set(keyword, wcsim_header[keyword])

            # Writes file with WCS information header keywords from the
            # new-image.fits file, but with all other header keywords as well
            # as image data from the original file being processed.
            hdu = fits.PrimaryHDU(imagedata, header=other_header)
            hdulist = fits.HDUList([hdu])
            out_path = os.path.join(dirtarget, fil, 'WCS', target + '_' +
                                    fil + '_{}.fits'.format(numbers[n+1]))
            hdulist.writeto(out_path, overwrite=True)

    for fil in filters:
        os.chdir(os.path.join(dirtarget, fil, 'WCS'))
        # Reads in images generated by above process.
        isr_wcs_images = sorted(glob.glob(os.path.join(dirtarget, fil, 'WCS',
                                                       '*.fits')))

        # Corrects WCS information so that it is specific to image being
        # processed using the imwcs command from WCSTools.
        for i, image in enumerate(isr_wcs_images):
            if verbose:
                pass
            else:
                subprocess.call(['imwcs', '-w', '-i', '100', '-c',
                                 'new-image.tab', target + '_' + fil +
                                 '_{}.fits'.format(numbers[i+1])])

        # Moves corrected images to separate directory.
        isr_wcs_images = sorted(glob.glob(os.path.join(dirtarget, fil, 'WCS',
                                                       '*w.fits')))
        os.mkdir(os.path.join(dirtarget, fil, 'WCS', 'accurate_WCS'))
        out_path = os.path.join(dirtarget, fil, 'WCS', 'accurate_WCS')
        for image in isr_wcs_images:
            move(image, out_path)
